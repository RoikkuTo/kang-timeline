var __defProp=Object.defineProperty,__defProps=Object.defineProperties,__getOwnPropDescs=Object.getOwnPropertyDescriptors,__getOwnPropSymbols=Object.getOwnPropertySymbols,__hasOwnProp=Object.prototype.hasOwnProperty,__propIsEnum=Object.prototype.propertyIsEnumerable,__defNormalProp=(t,e,s)=>e in t?__defProp(t,e,{enumerable:!0,configurable:!0,writable:!0,value:s}):t[e]=s,__spreadValues=(t,e)=>{for(var s in e||(e={}))__hasOwnProp.call(e,s)&&__defNormalProp(t,s,e[s]);if(__getOwnPropSymbols)for(var s of __getOwnPropSymbols(e))__propIsEnum.call(e,s)&&__defNormalProp(t,s,e[s]);return t},__spreadProps=(t,e)=>__defProps(t,__getOwnPropDescs(e));!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e():"function"==typeof define&&define.amd?define(e):(t="undefined"!=typeof globalThis?globalThis:t||self).Timeline=e()}(this,(function(){"use strict";let t=[];class e{static loop(s){for(const e of t)e.consume(s);e.requestId=requestAnimationFrame(e.loop)}static start(){e.requestId=requestAnimationFrame(e.loop)}static subscribe(e){t.push(e)}static checkId(e){return t.every((t=>t.id!==e))}static unsubscribe(e){const s=t.findIndex((t=>t.id===e));-1!==s&&t.splice(s,1)}}e.start();class s{constructor(t){if(this.frequency=0,this.task=()=>null,"object"==typeof t){const{frequency:e,run:s}=t;this.frequency=e||0,this.task=s}else"function"==typeof t&&(this.frequency=0,this.task=t);this.count=0}run(t){t.currentTime>=this.frequency*this.count&&(this.count++,this.task(__spreadProps(__spreadValues({},t),{count:this.count})))}}class i{constructor(){this.list=[],this.index=0}add(t){this.list.push(__spreadValues({id:Math.random()+Date.now()},t)),this.list.sort(((t,e)=>t.timestamp<e.timestamp?-1:t.timestamp>e.timestamp?1:0))}remove(t){const e=this.list.map((t=>t.id)).indexOf(t);this.list.splice(e,0),this.index--}compare(t){this.list[this.index]&&this.list[this.index].timestamp<=t.currentTime&&(this.list[this.index].task(t),this.index++)}}class r{constructor(t){this.link=null,this.context=t}add(t,e=(()=>null)){const s=this.link;return this.link=new Promise((async function(i,r){await s,await new Promise(t).then((()=>{e(),i(null)})).catch((()=>{console.error("Missing resolve in the request function."),e(),r()}))})),this.context}}class n{constructor(t){this.temp=null,this.keytime=null,this.initial=0,this.timestamp=0,this.context=t}compare(t){this.keytime&&(null===this.temp&&(this.temp=t.currentTime+this.keytime.delay),console.log(this.keytime.delay),null!==this.temp&&this.temp<=t.currentTime&&(this.keytime.callback(t),this.keytime=null,this.temp=null))}}class o{constructor(t,e){this.currentTime=t,this.globalTime=e}}return class{constructor(t={}){const{id:o,speed:a,task:h,loop:l}=t;var c;this.id=(c=o)?e.checkId(c)?c:(console.error(`ERROR: The "${c}" id has already been defined. (Timeline Library)`),Date.now()):Date.now(),this.speed=a||1,this.task=h?new s(h):null,this.loop=l,this.userKeytimes=new i,this.chain=new r(this),this.utilKeytimes=new n(this),this.bank=0,this.initial=0,this.current=0,this.state="stop",e.subscribe(this)}consume(t){this.controller(t);const e=new o(this.current,t);this.utilKeytimes.compare(e),this.userKeytimes.compare(e)}setId(t){t?e.checkId(t)?this.id=t:console.error(`ERROR: The "${t}" id has already been defined. (Timeline Library)`):console.error("ERROR: Please specify an id. (Timeline Library)")}setRatio(t){this.speed=t}setTask(t){this.task=new s(t)}addKeytime(t){this.userKeytimes.add(t)}removeKeytime(t){this.userKeytimes.remove(t)}listKeytimes(){return this.userKeytimes.list}controller(t){switch(this.initial||(this.initial=t),this.state){case"start":this.bank&&(this.initial+=this.bank,this.bank=null),this.current=(t-this.initial)*this.speed,this.task&&this.task.run(new o(this.current,t)),this.loop&&this.current>=this.loop&&this.reset().start();break;case"stop":this.bank=(t-this.initial-this.current)*this.speed;break;case"reset":this.state="stop",this.current=0,this.initial=0,this.bank=null;break;default:console.error("Undefined state.")}}request(t,e=0,s){return this.chain.add(((s,i)=>{this.utilKeytimes.keytime={id:Date.now(),delay:e,callback:e=>{this.state=t,s(null)}}}).bind(this),s)}start(t,e){return this.request("start",t,e)}stop(t,e){return this.request("stop",t,e)}reset(t,e){return this.request("reset",t,e)}delete(){e.unsubscribe(this.id)}}}));
